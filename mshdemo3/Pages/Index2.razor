@page "/"
@inject AvatarService AvatarService
@inject AvatarVideoService AvatarVideoService
@inject CommonAvtarService CommonAvtarService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<div class="token-inner">
    <h3>Enter Token</h3>
    <input type="text" @bind-value="_token" />
</div>
<InputFile accept=".jpg,.jpeg,.png,.gif,.mp4,.avi,.mov,.mkv,.obj" OnChange="@(async e => await HandleFileSelected(e))" />


@if (isButtonShow)
{
    <div class="action-btn">
        <button type="button" class="btn btn-primary btn-lg" @onclick="Download">
            <span>
                Download
                <img src="/down-load.svg" />
            </span>

        </button>
        <button type="button" class="btn btn-secondary btn-lg" @onclick="GetMeasurement">
            <span>
                Measurement
                <img src="/rulers.svg" />
            </span>
        </button>
    </div>
}

@if (isLoaderActive)
{
    <div class="loader"></div>
}

@if (showMeasurementData)
{
    <div class="card cus-card">
        <h5 class="card-header">Measurement</h5>
        <div class="card-body">
            <div class="measurement-data">
                <div class="shape">
                    <h4>Shape <img src="/exclamation-circle.svg" /></h4>
                    <p>@BodyShapevalue</p>
                </div>

                <div class="units">
                    <h4>Units <img src="/eye.svg" /></h4>
                    <p>@unitsvalue</p>
                </div>

                <div class="height">
                    <h4>Height (cm) <img src="/eye.svg" /></h4>
                    <p class="measurement-data-inner">@Height</p>
                </div>

                <div class="weight">
                    <h4>Weight (kg) <img src="/eye.svg" /></h4>
                    <p class="measurement-data-inner">@Weight</p>
                </div>

                <div class="chest">
                    <h4>Chest (cm) <img src="/eye.svg" /></h4>
                    <p class="measurement-data-inner">@chest</p>
                </div>

                <div class="waist">
                    <h4>Waist (cm) <img src="/eye.svg" /></h4>
                    <p class="measurement-data-inner">@waist</p>
                </div>

                <div class="hips">
                    <h4>Hips (cm) <img src="/eye.svg" /></h4>
                    <p class="measurement-data-inner">@hips</p>
                </div>

                <div class="inseam">
                    <h4>Inseam (cm) <img src="/eye.svg" /></h4>
                    <p class="measurement-data-inner">@inseam</p>
                </div>
            </div>
        </div>
    </div>
}

<canvas id="threeCanvas" style="width: 100%; height: 100%;"></canvas>

@code {
    private string? BodyShapevalue { get; set; }
    private string? unitsvalue { get; set; }
    public double inseam { get; set; }
    public double hips { get; set; }
    public double waist { get; set; }
    public double chest { get; set; }
    public double Weight { get; set; }
    public double Height { get; set; }
    private string? _token { get; set; }
    private string? assetId;
    private string? _s3Url;
    private bool uploadimages3;
    public AvatarMeasurements? responseAvatar;
    public AvatarExport? responseAvatarExport;
    private bool isLoaderActive = false;
    private bool isButtonShow = false;
    private bool showMeasurementData = false;
    List<ToastMessage> messages = new List<ToastMessage>();
    private string extension;
    private bool uploadvideos3;

    private void ShowMessage(ToastType toastType, string message, string title) => messages.Add(CreateToastMessage(toastType, message, title));

    private ToastMessage CreateToastMessage(ToastType toastType, string message, string title)
    => new ToastMessage
        {
            Type = toastType,
            Title = title,
            Message = message,
        };

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if(string.IsNullOrEmpty(_token))
        {
            ShowMessage(ToastType.Danger, "Enter valid token !", "UnAutorize");
        }
        else
        {
            isLoaderActive = true;
            isButtonShow = false;
            showMeasurementData = false;
            var file = e.File;
            extension = Path.GetExtension(file.Name);

            if (extension == ".jpg" || extension == ".jpeg" || extension == ".png" || extension == ".gif")
            {
                if (e.FileCount > 0)
                {
                    using var memoryStream = new MemoryStream();
                    await file.OpenReadStream().CopyToAsync(memoryStream);
                    memoryStream.Position = 0; // Reset stream position before upload
                    try
                    {
                        assetId = await AvatarService.InitiateAvatarCreation(_token);
                        _s3Url = await AvatarService.RequestImageUploads(assetId, _token);
                        uploadimages3 = await AvatarService.UploadImageToS3(_s3Url, memoryStream);
                        await AvatarService.StartFittingProcess(assetId, _token);
                        if (uploadimages3)
                        {
                            isLoaderActive = false;
                            isButtonShow = true;
                            ShowMessage(ToastType.Success, "Avatar Created succesfully !", "Avatar created");
                        }
                        else
                        {
                            ShowMessage(ToastType.Danger, "File upload to s3 bucket for avatar creation Faield !", "File Process For Avatar");
                        }
                    }
                    catch (Exception ex)
                    {
                        isLoaderActive = false;
                        ShowMessage(ToastType.Danger, ex.Message.ToString(), "Faield");
                    }
                }
            }
            else if (extension == ".mp4" || extension == ".avi" || extension == ".mov" || extension == ".mkv")
            {
                if (e.FileCount > 0)
                {
                    const long maxAllowedSize = 20 * 1024 * 1024; // 20 MB
                    if (file.Size > maxAllowedSize)
                    {
                        // Handle file too large scenario
                        ShowMessage(ToastType.Danger, "File too large to upload.!", "Status");
                        return;
                    }

                    assetId = await AvatarVideoService.InitiateAvatarCreation(_token);

                    // Check if the result is a status code
                    if (assetId == "BadRequest")
                    {
                        ShowMessage(ToastType.Danger, "Please contact the administrator. It might be a token issue or token credits might be completed.!", "Error: Bad Request");
                        return;
                    }
                    else if (assetId == "Unauthorized")
                    {
                        ShowMessage(ToastType.Danger, "Access is denied due to invalid credentials. !", "Error: Unauthorized");
                        return;

                    }
                    else if (assetId == "NotFound")
                    {
                        ShowMessage(ToastType.Danger, "The requested resource could not be found.!", "Error: Not Found");
                        return;
                    }

                    var filePath = Path.Combine("wwwroot", "uploadVideo", $"{assetId}{extension}");

                    // Ensure the directory exists

                    var directory = Path.GetDirectoryName(filePath);
                    if (!Directory.Exists(directory))
                    {
                        Directory.CreateDirectory(directory);
                    }

                    // Save the file to wwwroot/uploadVideo
                    await using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await file.OpenReadStream(maxAllowedSize).CopyToAsync(fileStream);
                    }

                    // Upload to S3
                    await using (var memoryStream = new MemoryStream())
                    {
                        await using (var fileStream = new FileStream(filePath, FileMode.Open))
                        {
                            await fileStream.CopyToAsync(memoryStream);
                        }
                        memoryStream.Position = 0; // Reset stream position before upload
                        try
                        {
                            _s3Url = await AvatarVideoService.RequestVideoUploads(assetId, _token);
                            uploadvideos3 = await AvatarVideoService.UploadVideoToS3(_s3Url, filePath);
                            await AvatarVideoService.StartFittingProcess(assetId, _token);
                            if (uploadvideos3)
                            {
                                isLoaderActive = false;
                                isButtonShow = true;
                                ShowMessage(ToastType.Success, "Avatar Created succesfully !", "Avatar created");
                            }
                            else
                            {
                                ShowMessage(ToastType.Danger, "File upload to s3 bucket for avatar creation Faield !", "File Process For Avatar");
                            }
                        }
                        catch (Exception ex)
                        {
                            isLoaderActive = false;
                            ShowMessage(ToastType.Danger, ex.Message.ToString(), "Faield");
                        }
                    }
                }
            }
        }
       
    }

    private double DoubleFormatter(double value)
    {
        var result = Math.Round(value, 2);
        return result;
    }

    public async Task<AvatarMeasurements> AvatarMeasurements(string avatarId, string token)
    {
        responseAvatar = await CommonAvtarService.RetrieveAvatarMeasurements(avatarId, token);
        var avatarStatus = responseAvatar.data.attributes.state;
        return responseAvatar;
    }

    private async Task GetMeasurement()
    {
        isLoaderActive = true;
        showMeasurementData = false;
        responseAvatar = await AvatarMeasurements(assetId, _token);
        if (responseAvatar.data.attributes.state == "READY")
        {
            ShowMessage(ToastType.Success, "Measurements !", "Avatar measrements");
            Weight = DoubleFormatter(responseAvatar.data.attributes.metadata.bodyShape.mesh_measurements.Weight);
            Height = DoubleFormatter(responseAvatar.data.attributes.metadata.bodyShape.mesh_measurements.Height);
            BodyShapevalue = responseAvatar.data.attributes.metadata.bodyShape.gender;
            unitsvalue = "METRIC";
            isLoaderActive = false;
            showMeasurementData = true;
        }
        else
        {
            isLoaderActive = false;
            ShowMessage(ToastType.Info, "Avatar is not in ready state. Please wait for sometime.!", "Status");
        }

    }

    private async Task Download()
    {
        isLoaderActive = true;
        responseAvatar = await AvatarMeasurements(assetId, _token);
        if (responseAvatar.data.attributes.state == "READY")
        {
            responseAvatarExport = await AvatarService.ExportAvatar(assetId, _token);
            if (responseAvatarExport.data.attributes.state == "READY")
            {
                var s3BucketFileLink = responseAvatarExport.data.attributes.url.path.ToString();
                await JSRuntime.InvokeVoidAsync("threeExample", "threeCanvas", s3BucketFileLink);
                Navigation.NavigateTo(responseAvatarExport.data.attributes.url.path, true);
            }
            else
            {
                isLoaderActive = false;
                ShowMessage(ToastType.Info, "Avatar is not in ready state. Please wait sometime for download.!", "Status");
            }

            isLoaderActive = false;
        }
        else
        {
            isLoaderActive = false;
            ShowMessage(ToastType.Info, "Avatar is not in ready state. Please wait sometime for download.!", "Status");
        }
    }
}